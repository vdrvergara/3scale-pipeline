apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  name: new-pipeline-h4rtl8
  namespace: demo
  labels:
    tekton.dev/pipeline: new-pipeline
spec:
  params:
    - name: remote
      value: saas
    - name: service-system-name
      value: demo
    - name: app-plan-system-name
      value: demo
    - name: app-system-name
      value: demo
    - name: stage-url
      value: 'http://halting-shock.demo.svc:8080'
    - name: base-url
      value: 'http://halting-shock.demo.svc:8080'
    - name: swager-file
      value: swagger.yaml
    - name: toolbox-file
      value: 3scalerc.yaml
    - name: prod-url
      value: 'http://halting-shock-demo.apps.cluster-d0cc.d0cc.sandbox825.opentlc.com'
  pipelineRef:
    name: new-pipeline
  serviceAccountName: pipeline
  timeout: 1h0m0s
  workspaces:
    - name: shared
      volumeClaimTemplate:
        metadata:
          creationTimestamp: null
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 2Gi
          storageClassName: gp2
          volumeMode: Filesystem
        status: {}
status:
  completionTime: '2021-10-06T20:44:57Z'
  conditions:
    - lastTransitionTime: '2021-10-06T20:44:57Z'
      message: 'Tasks Completed: 1 (Failed: 1, Cancelled 0), Skipped: 2'
      reason: Failed
      status: 'False'
      type: Succeeded
  pipelineSpec:
    params:
      - default: saas
        name: remote
        type: string
      - default: demo
        name: service-system-name
        type: string
      - default: demo
        name: app-plan-system-name
        type: string
      - default: demo
        name: app-system-name
        type: string
      - name: stage-url
        type: string
      - name: base-url
        type: string
      - default: swagger.yaml
        name: swager-file
        type: string
      - default: 3scalerc.yaml
        name: toolbox-file
        type: string
      - name: prod-url
        type: string
    tasks:
      - name: api-import
        params:
          - name: remote
            value: saas
          - name: service-system-name
            value: demo
          - name: prod-url
            value: >-
              http://halting-shock-demo.apps.cluster-d0cc.d0cc.sandbox825.opentlc.com/
          - name: base-url
            value: 'http://halting-shock.demo.svc:8080'
          - name: toolbox-file
            value: 3scalerc.yaml
        runAfter:
          - git-clone-3scale
        taskRef:
          kind: Task
          name: api-import
      - name: git-clone-3scale
        params:
          - name: url
            value: 'https://github.com/vdrvergara/3scale-tekton-pipeline.git'
          - name: revision
            value: branch
          - name: refspec
            value: master
          - name: submodules
            value: 'true'
          - name: depth
            value: '1'
          - name: sslVerify
            value: 'true'
          - name: subdirectory
            value: 3scale
          - name: deleteExisting
            value: 'true'
          - name: verbose
            value: 'true'
          - name: gitInitImage
            value: >-
              registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:da1aedf0b17f2b9dd2a46edc93ff1c0582989414b902a28cd79bad8a035c9ea4
          - name: userHome
            value: /workspaces/shared
        runAfter:
          - git-clone-app
        taskRef:
          kind: Task
          name: git-clone
        workspaces:
          - name: shared
            workspace: shared
      - name: git-clone-app
        params:
          - name: url
            value: 'https://github.com/vdrvergara/halting-shock.git'
          - name: revision
            value: branch
          - name: refspec
            value: main
          - name: submodules
            value: 'true'
          - name: depth
            value: '1'
          - name: sslVerify
            value: 'true'
          - name: subdirectory
            value: app
          - name: deleteExisting
            value: 'true'
          - name: verbose
            value: 'true'
          - name: gitInitImage
            value: >-
              registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:da1aedf0b17f2b9dd2a46edc93ff1c0582989414b902a28cd79bad8a035c9ea4
          - name: userHome
            value: /tekton/home
        taskRef:
          kind: ClusterTask
          name: git-clone
        workspaces:
          - name: output
            workspace: shared
    workspaces:
      - name: shared
  skippedTasks:
    - name: api-import
    - name: git-clone-3scale
  startTime: '2021-10-06T20:44:14Z'
  taskRuns:
    new-pipeline-h4rtl8-git-clone-app-k4sxb:
      pipelineTaskName: git-clone-app
      status:
        completionTime: '2021-10-06T20:44:56Z'
        conditions:
          - lastTransitionTime: '2021-10-06T20:44:56Z'
            message: >
              "step-clone" exited with code 1 (image:
              "registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:5d1c919446ea31029566a7dce78928f94b699ce7a141f25948e143fca2fc0e71");
              for logs run: kubectl -n demo logs
              new-pipeline-h4rtl8-git-clone-app-k4sxb-pod-fd8sr -c step-clone
            reason: Failed
            status: 'False'
            type: Succeeded
        podName: new-pipeline-h4rtl8-git-clone-app-k4sxb-pod-fd8sr
        startTime: '2021-10-06T20:44:14Z'
        steps:
          - container: step-clone
            imageID: >-
              registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:5d1c919446ea31029566a7dce78928f94b699ce7a141f25948e143fca2fc0e71
            name: clone
            terminated:
              containerID: >-
                cri-o://4a814872e049576f853ef0abb733855c3831a844a4e4959252dbde3cbb23465f
              exitCode: 1
              finishedAt: '2021-10-06T20:44:56Z'
              reason: Error
              startedAt: '2021-10-06T20:44:56Z'
        taskSpec:
          description: >-
            These Tasks are Git tasks to work with repositories used by other
            tasks in your Pipeline.

            The git-clone Task will clone a repo from the provided url into the
            output Workspace. By default the repo will be cloned into the root
            of your Workspace. You can clone into a subdirectory by setting this
            Task's subdirectory param. This Task also supports sparse checkouts.
            To perform a sparse checkout, pass a list of comma separated
            directory patterns to this Task's sparseCheckoutDirectories param.
          params:
            - description: Repository URL to clone from.
              name: url
              type: string
            - default: ''
              description: 'Revision to checkout. (branch, tag, sha, ref, etc...)'
              name: revision
              type: string
            - default: ''
              description: Refspec to fetch before checking out revision.
              name: refspec
              type: string
            - default: 'true'
              description: Initialize and fetch git submodules.
              name: submodules
              type: string
            - default: '1'
              description: >-
                Perform a shallow clone, fetching only the most recent N
                commits.
              name: depth
              type: string
            - default: 'true'
              description: >-
                Set the `http.sslVerify` global git config. Setting this to
                `false` is not advised unless you are sure that you trust your
                git remote.
              name: sslVerify
              type: string
            - default: ''
              description: >-
                Subdirectory inside the `output` Workspace to clone the repo
                into.
              name: subdirectory
              type: string
            - default: ''
              description: >-
                Define the directory patterns to match or exclude when
                performing a sparse checkout.
              name: sparseCheckoutDirectories
              type: string
            - default: 'true'
              description: >-
                Clean out the contents of the destination directory if it
                already exists before cloning.
              name: deleteExisting
              type: string
            - default: ''
              description: HTTP proxy server for non-SSL requests.
              name: httpProxy
              type: string
            - default: ''
              description: HTTPS proxy server for SSL requests.
              name: httpsProxy
              type: string
            - default: ''
              description: Opt out of proxying HTTP/HTTPS requests.
              name: noProxy
              type: string
            - default: 'true'
              description: >-
                Log the commands that are executed during `git-clone`'s
                operation.
              name: verbose
              type: string
            - default: >-
                registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:da1aedf0b17f2b9dd2a46edc93ff1c0582989414b902a28cd79bad8a035c9ea4
              description: The image providing the git-init binary that this Task runs.
              name: gitInitImage
              type: string
            - default: /tekton/home
              description: >
                Absolute path to the user's home directory. Set this explicitly
                if you are running the image as a non-root user or have
                overridden

                the gitInitImage param with an image containing custom user
                configuration.
              name: userHome
              type: string
          results:
            - description: The precise commit SHA that was fetched by this Task.
              name: commit
            - description: The precise URL that was fetched by this Task.
              name: url
          steps:
            - env:
                - name: HOME
                  value: $(params.userHome)
                - name: PARAM_URL
                  value: $(params.url)
                - name: PARAM_REVISION
                  value: $(params.revision)
                - name: PARAM_REFSPEC
                  value: $(params.refspec)
                - name: PARAM_SUBMODULES
                  value: $(params.submodules)
                - name: PARAM_DEPTH
                  value: $(params.depth)
                - name: PARAM_SSL_VERIFY
                  value: $(params.sslVerify)
                - name: PARAM_SUBDIRECTORY
                  value: $(params.subdirectory)
                - name: PARAM_DELETE_EXISTING
                  value: $(params.deleteExisting)
                - name: PARAM_HTTP_PROXY
                  value: $(params.httpProxy)
                - name: PARAM_HTTPS_PROXY
                  value: $(params.httpsProxy)
                - name: PARAM_NO_PROXY
                  value: $(params.noProxy)
                - name: PARAM_VERBOSE
                  value: $(params.verbose)
                - name: PARAM_SPARSE_CHECKOUT_DIRECTORIES
                  value: $(params.sparseCheckoutDirectories)
                - name: PARAM_USER_HOME
                  value: $(params.userHome)
                - name: WORKSPACE_OUTPUT_PATH
                  value: $(workspaces.output.path)
                - name: WORKSPACE_SSH_DIRECTORY_BOUND
                  value: $(workspaces.ssh-directory.bound)
                - name: WORKSPACE_SSH_DIRECTORY_PATH
                  value: $(workspaces.ssh-directory.path)
                - name: WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND
                  value: $(workspaces.basic-auth.bound)
                - name: WORKSPACE_BASIC_AUTH_DIRECTORY_PATH
                  value: $(workspaces.basic-auth.path)
              image: $(params.gitInitImage)
              name: clone
              resources: {}
              script: >
                #!/usr/bin/env sh

                set -eu


                if [ "${PARAM_VERBOSE}" = "true" ] ; then
                  set -x
                fi


                if [ "${WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND}" = "true" ] ; then
                  cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.git-credentials" "${PARAM_USER_HOME}/.git-credentials"
                  cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.gitconfig" "${PARAM_USER_HOME}/.gitconfig"
                  chmod 400 "${PARAM_USER_HOME}/.git-credentials"
                  chmod 400 "${PARAM_USER_HOME}/.gitconfig"
                fi


                if [ "${WORKSPACE_SSH_DIRECTORY_BOUND}" = "true" ] ; then
                  cp -R "${WORKSPACE_SSH_DIRECTORY_PATH}" "${PARAM_USER_HOME}"/.ssh
                  chmod 700 "${PARAM_USER_HOME}"/.ssh
                  chmod -R 400 "${PARAM_USER_HOME}"/.ssh/*
                fi


                CHECKOUT_DIR="${WORKSPACE_OUTPUT_PATH}/${PARAM_SUBDIRECTORY}"


                cleandir() {
                  # Delete any existing contents of the repo directory if it exists.
                  #
                  # We don't just "rm -rf ${CHECKOUT_DIR}" because ${CHECKOUT_DIR} might be "/"
                  # or the root of a mounted volume.
                  if [ -d "${CHECKOUT_DIR}" ] ; then
                    # Delete non-hidden files and directories
                    rm -rf "${CHECKOUT_DIR:?}"/*
                    # Delete files and directories starting with . but excluding ..
                    rm -rf "${CHECKOUT_DIR}"/.[!.]*
                    # Delete files and directories starting with .. plus any other character
                    rm -rf "${CHECKOUT_DIR}"/..?*
                  fi
                }


                if [ "${PARAM_DELETE_EXISTING}" = "true" ] ; then
                  cleandir
                fi


                test -z "${PARAM_HTTP_PROXY}" || export
                HTTP_PROXY="${PARAM_HTTP_PROXY}"

                test -z "${PARAM_HTTPS_PROXY}" || export
                HTTPS_PROXY="${PARAM_HTTPS_PROXY}"

                test -z "${PARAM_NO_PROXY}" || export
                NO_PROXY="${PARAM_NO_PROXY}"


                /ko-app/git-init \
                  -url="${PARAM_URL}" \
                  -revision="${PARAM_REVISION}" \
                  -refspec="${PARAM_REFSPEC}" \
                  -path="${CHECKOUT_DIR}" \
                  -sslVerify="${PARAM_SSL_VERIFY}" \
                  -submodules="${PARAM_SUBMODULES}" \
                  -depth="${PARAM_DEPTH}" \
                  -sparseCheckoutDirectories="${PARAM_SPARSE_CHECKOUT_DIRECTORIES}"
                cd "${CHECKOUT_DIR}"

                RESULT_SHA="$(git rev-parse HEAD)"

                EXIT_CODE="$?"

                if [ "${EXIT_CODE}" != 0 ] ; then
                  exit "${EXIT_CODE}"
                fi

                printf "%s" "${RESULT_SHA}" > "$(results.commit.path)"

                printf "%s" "${PARAM_URL}" > "$(results.url.path)"
          workspaces:
            - description: >-
                The git repo will be cloned onto the volume backing this
                Workspace.
              name: output
            - description: >
                A .ssh directory with private key, known_hosts, config, etc.
                Copied to

                the user's home before git commands are executed. Used to
                authenticate

                with the git remote when performing the clone. Binding a Secret
                to this

                Workspace is strongly recommended over other volume types.
              name: ssh-directory
              optional: true
            - description: >
                A Workspace containing a .gitconfig and .git-credentials file.
                These

                will be copied to the user's home before any git commands are
                run. Any

                other files in this Workspace are ignored. It is strongly
                recommended

                to use ssh-directory over basic-auth whenever possible and to
                bind a

                Secret to this Workspace over other volume types.
              name: basic-auth
              optional: true
